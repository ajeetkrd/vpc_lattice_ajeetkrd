---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This template deploys a VPC, Aurora DB Cluster, and an EC2 instance

Parameters:
  VpcName:
    Default: DemoAuroraMLWorkshop
    Type: String

  VpcCIDR:
    Default: 10.215.0.0/16
    Type: String

  Subnet1CIDR:
    Default: 10.215.10.0/24
    Type: String

  Subnet2CIDR:
    Default: 10.215.20.0/24
    Type: String

  Subnet3CIDR:
    Default: 10.215.30.0/24
    Type: String

  Subnet4CIDR:
    Default: 10.215.40.0/24
    Type: String

  DBInstanceSize:
    Type: String
    Default: db.r6g.2xlarge
    AllowedValues:
      - db.r6g.xlarge
      - db.r6g.2xlarge
      - db.r6g.4xlarge
      - db.t4g.large

  IsWorkshopStudioEnv:
    Type: String
    Default: "no"
    AllowedValues:
      - "no"
      - "yes"
    Description: Whether this stack is being deployed in a Workshop Studio environment or not. If not sure, leave as default of "no".

## Conditions
Conditions:
  isInWS:
    !Equals [ !Ref IsWorkshopStudioEnv, "yes" ]
  isNotInWS:
    !Equals [ !Ref IsWorkshopStudioEnv, "no" ]

Resources:
## Start VPC -----------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref VpcName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref Subnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Public)

  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs ]
      MapPublicIpOnLaunch: false
      CidrBlock: !Ref Subnet4CIDR
      Tags:
        - Key: Name
          Value: !Sub ${VpcName} (Private)

  RouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: 
      - InternetGatewayAttachment 
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref VpcName

  DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  Subnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet4

# End VPC --------------------------------------------------------------

## Start Aurora PostgreSQL ---------------------------------------------

# RDS IAM Role for Amazon Bedrock 
  AuroraBedrockRole: 
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${AWS::StackName}-aurora-bedrock-${AWS::Region}
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "rds.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - 
          PolicyName: 'Aurora-Bedrock-Policy'
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "bedrock:InvokeModel"
                Resource: [ !Sub "arn:aws:bedrock:*:${AWS::AccountId}:provisioned-model/*" , "arn:aws:bedrock:*::foundation-model/*" ]

# Security Group for database
  VPCSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Ref VpcCIDR
        Description: 'Access to AppServer Host Security Group.'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-DBSecurityGroup'

# Encryption key Aurora
  EncryptionKey:
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

# Encryption key alias
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey

# Database Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "RDS DB Subnet Group"
      SubnetIds: [!Ref Subnet3, !Ref Subnet4 ]

# Create parameter groups for DB cluster
  democustomclusterparamgroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: "Aurora PostgreSQL Custom Cluster parameter group"
      Family: aurora-postgresql15
      Parameters:
        shared_preload_libraries: "pg_stat_statements"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-clusterparamgroup"

# Aurora cluster
  DBCluster:
    Type: AWS::RDS::DBCluster
    DependsOn: 
      - VPC
      - InternetGatewayAttachment
    Properties:
      DBClusterIdentifier: "demo-pgvector"
      Engine: aurora-postgresql
      AssociatedRoles:
          - FeatureName: Bedrock
            RoleArn: !GetAtt AuroraBedrockRole.Arn
      Port: 5432
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecrets, ':SecretString:password}}' ]]
      DBClusterParameterGroupName: !Ref democustomclusterparamgroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      AutoMinorVersionUpgrade: true
      EngineVersion: "15.5"
      KmsKeyId: !Ref EncryptionKey
      StorageEncrypted: true
      StorageType: aurora-iopt1
      BackupRetentionPeriod: 7
      DeletionProtection: false
      VpcSecurityGroupIds: [ !Ref VPCSecurityGroup ]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

# Create enhanced monitoring role
  roleEnhancedMonitoring:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-monitor-${AWS::Region}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole

# Create parameter groups for cluster nodes
  democustomdbparamgroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: !Sub ${AWS::StackName}-dbparamgroup
      Family: aurora-postgresql15
      Parameters:
        log_rotation_age: '1440'
        log_rotation_size: '102400'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-dbparamgroup

# Deploy the first cluster node (always the writer)
  DBNodeWriter:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-01
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref democustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-01

# Deploy the reader node
  DBNodeReader:
    Type: AWS::RDS::DBInstance
    DependsOn: DBNodeWriter
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: !Sub ${AWS::StackName}-node-02
      DBInstanceClass: !Ref DBInstanceSize
      DBParameterGroupName: !Ref democustomdbparamgroup
      Engine: aurora-postgresql
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt roleEnhancedMonitoring.Arn
      PubliclyAccessible: true
      EnablePerformanceInsights: true
      PerformanceInsightsRetentionPeriod: 7
      AutoMinorVersionUpgrade: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-node-02

# Deploy secrets manager
  RDSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "demo-pgvector-secret"
      Description: 'This is the secret for Aurora cluster'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres" }'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludePunctuation: true

# Attach secret to db
  SecretPostgreSQLAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSSecrets
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

## End Aurora PostgreSQL -----------------------------------------------

## Start Bastion -------------------------------------------------------

# Role
  BastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - iam:PassRole
                  - bedrock:*
                  - iam:GetUser
                  - iam:ListUsers
                  - ec2:*
                  - cloudformation:*
                  - rds:*
                  - secretsmanager:*
                  - ec2-instance-connect:SendSSHPublicKey
                Effect: Allow
                Resource: '*'
          PolicyName: BastionPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BastionIAMRole

# Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to ports 22 and 8080
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: "0.0.0.0/0"
        Description: 'Access to EC2 Bastion'
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: "0.0.0.0/0"
        Description: 'Access to Streamlit application'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - SecurityGroup

# EC2 instance
  Bastion:
    Type: AWS::EC2::Instance
    DependsOn: 
      - DBCluster
    Properties:
      InstanceType: m5.2xlarge
      ImageId: 'resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref Subnet1
      SecurityGroupIds: 
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AWS::StackName
              - bastion
      UserData: !Base64
        Fn::Join:
          - ''
          - - |
              #!/bin/bash
            - |
              yum install postgresql15 -y
            - |
              export TOKEN=$(curl --request PUT "http://169.254.169.254/latest/api/token" --header "X-aws-ec2-metadata-token-ttl-seconds: 3600")
            - |
              export AWSREGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document --header "X-aws-ec2-metadata-token: $TOKEN" | jq -r ".region")
              CREDS=$(aws secretsmanager get-secret-value --secret-id demo-pgvector-secret --region $AWSREGION --query "SecretString" --output text)
            - |
              export PGUSER=$(echo $CREDS | jq -r '.username')
            - |
              export PGPASSWORD=$(echo $CREDS | jq -r '.password')
            - |
              export PGHOST=$(aws rds describe-db-cluster-endpoints --db-cluster-identifier demo-pgvector --region $AWSREGION --query 'DBClusterEndpoints[0].Endpoint' --output text)
            - |
              export PGDATABASE=moviedb
            - |
              export PGPORT=5432
            - |
              echo "export PGUSER=$PGUSER" >> /home/ec2-user/.bashrc
            - |
              echo "export PGHOST=$PGHOST" >> /home/ec2-user/.bashrc
            - |
              echo "export PGPORT=$PGPORT" >> /home/ec2-user/.bashrc
            - |
              echo "export PGPASSWORD=$PGPASSWORD" >> /home/ec2-user/.bashrc
            - |
              echo "export PGDATABASE=$PGDATABASE" >> /home/ec2-user/.bashrc
            - |
              echo "export AWSREGION=$AWSREGION" >> /home/ec2-user/.bashrc
            - |
              echo "${PGHOST}:${PGPORT}:*:${PGUSER}:${PGPASSWORD}" > /home/ec2-user/.pgpass
            - |
              chmod 600 /home/ec2-user/.pgpass
            - |
              chown ec2-user:ec2-user /home/ec2-user/.pgpass
            - |
              yum install python3-pip -y
            - |
              python3 -m pip install boto3  
            - |


## End Bastion ---------------------------------------------------------
